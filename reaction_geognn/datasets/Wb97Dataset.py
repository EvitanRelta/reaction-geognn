from typing import Sized, cast

import pandas as pd
import torch
from base_classes import GeoGNNDataElement
from torch.utils.data import Dataset
from typing_extensions import override
from utils import abs_path


class Wb97Dataset(Dataset[GeoGNNDataElement], Sized):
    """Computational activation energies, and enthalpies of formation at the
    Ï‰B97X-D3/def2-TZVP level of theory.

    Data/Labels are `tensor([activation_energy, enthalpy])`.

    ## NOTE:
    This does NOT include the reversed reactions (ie. `product -> reactant`
    instead of `reactant -> product`) that's employed by the CGR paper -
    `"Machine Learning of Reaction Properties via Learned Representations of the Condensed Graph of Reaction"`

    The `wb97xd3.csv` CSV file is downloadable at: \\
    https://zenodo.org/record/3715478.

    Generated by the paper: \\
    "Reactants, products, and transition states of elementary chemical
    reactions based on quantum chemistry"
    https://doi.org/10.1038/s41597-020-0460-4

    Which was then used and referenced by: \\
    "Machine Learning of Reaction Properties via Learned Representations of
    the Condensed Graph of Reaction"
    https://pubs.acs.org/doi/pdf/10.1021/acs.jcim.1c00975
    """

    def __init__(
        self,
        csv_path: str = './wb97xd3/wb97xd3.csv',
    ) -> None:
        """
        Args:
            csv_path (str, optional): Path to the dataset's `.csv` file. \
                Defaults to './wb97xd3/wb97xd3.csv'.
        """
        data_columns_to_use = ['ea', 'dh']
        raw_df = pd.read_csv(abs_path(csv_path, __file__), sep=',')

        reactant_smart_list = raw_df['rsmi'].values
        product_smart_list = raw_df['psmi'].values
        filtered_data = torch.tensor(raw_df[data_columns_to_use].values, dtype=torch.float32)

        self.data_list: list[GeoGNNDataElement] = []
        for i in range(len(filtered_data)):
            reaction_smart: str = cast(str, reactant_smart_list[i]) \
                + '>>' + cast(str, product_smart_list[i])
            self.data_list.append({
                'smiles': reaction_smart,
                'data': filtered_data[i]
            })

    @override
    def __getitem__(self, index: int) -> GeoGNNDataElement:
        return self.data_list[index]

    @override
    def __len__(self) -> int:
        return len(self.data_list)
